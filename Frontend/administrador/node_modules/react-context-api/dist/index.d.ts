import * as React from "react";
export declare type ChildrenFn<P> = (props: P) => JSX.Element | null;
export declare type RPC<RP, P = {}> = React.ComponentType<P & {
    children: ChildrenFn<RP>;
}>;
interface Props {
    [k: string]: any;
}
export interface ContextType<T> {
    Provider: React.ComponentType;
    Consumer: React.Consumer<T>;
}
export interface DefaultContextValueType {
    [k: string]: any;
}
export interface ContextListType {
    [k: string]: ContextType<DefaultContextValueType>;
}
export interface ContextAPIProviderProps {
    children: JSX.Element;
}
export interface ContextAPIContextProps {
    contextToRenderProps: string[];
    children: ChildrenFn<any>;
}
export declare type ContextProvider = React.Component<Props & ContextAPIProviderProps>;
export declare type ContextConsumer = RPC<any, Props>;
export interface ContextAPIType {
    ContextProvider: any;
    ContextConsumer: any;
    getContextConsumer: (contextToRenderProps?: string[]) => ContextConsumer;
    withContextProvider: (Base: React.ComponentType) => React.ComponentType;
    withContextConsumer: (contextToRenderProps?: string[]) => (Base: React.ComponentType) => React.ComponentType;
}
export default function createContextAPI(contextList: ContextListType): ContextAPIType;
export {};
